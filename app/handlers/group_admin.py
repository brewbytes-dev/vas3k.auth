import logging

from aiogram import types, Router, F, flags
from aiogram.filters import Command, CommandObject

from aiogram.utils.markdown import hblockquote

from app.backend.chat import ChatBackend
from app.filters.admin import AdminFilter

logger = logging.getLogger(__name__)

router = Router(name="group_admin")
router.message.filter(F.chat.type.in_({"group", "supergroup"}))
router.message.filter(AdminFilter(is_admin=True))


@flags.release_notes
@router.message(Command(commands=['auto_whois']))
async def show_intro(message: types.Message, chat_backend: ChatBackend):
    switched_status = await chat_backend.switch_show_intro(message.chat.id)

    if switched_status:
        await message.answer("üëì‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer("üëì –ê–≤—Ç–æ-whois –≤—ã–∫–ª—é—á–µ–Ω")


@router.message(Command(commands=['only_active']))
async def only_active(message: types.Message, chat_backend: ChatBackend):
    switched_status = await chat_backend.switch_only_active(message.chat.id)

    if switched_status:
        await message.answer("üîí –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø—É—Å–∫–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Å—Ç–µ–∫—à–∏–º —á–ª–µ–Ω—Å—Ç–≤–æ–º")
    else:
        await message.answer("üëê –ë–æ—Ç –±—É–¥–µ—Ç –ø—É—Å–∫–∞—Ç—å –≤—Å–µ—Ö –∫—Ç–æ –±—ã–ª –∫–æ–≥–¥–∞ –ª–∏–±–æ –≤ –∫–ª—É–±–µ")


@flags.release_notes
@router.message(Command(commands=['entry_question']))
async def follow_up_requests(message: types.Message, command: CommandObject, chat_backend: ChatBackend):
    text = None
    if command.args is None:
        current_status = await chat_backend.get_follow_up_requests_status(message.chat.id)
        if current_status is True:
            # turn off
            await chat_backend.turn_off_follow_up_requests(message.chat.id)
            await message.answer("üì¨ –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å–∏—Ç—å –ª—é–¥–µ–π –Ω–µ –∏–∑ –∫–ª—É–±–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
            return
    else:
        text = command.args.strip()

    # turn on with default | current text
    set_text = await chat_backend.turn_on_follow_up_requests(message.chat.id, text)
    html_text = hblockquote(set_text)

    cmd = "/entry_question"
    cmd_quote = hblockquote(f"{cmd} <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
    await message.answer(
        f"üì¨‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Å–∏—Ç—å –ª—é–¥–µ–π –Ω–µ –∏–∑ –∫–ª—É–±–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:\n\n"
        f"{html_text}\n"
        f"\n"
        f"–¢–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π:\n"
        f"{cmd_quote}"
    )
