import logging

from aiogram import types, Router, F
from aiogram.filters import Command

from app.filters.admin import AdminFilter
from app.repos.chats import RepoChat

logger = logging.getLogger(__name__)

router = Router(name="group_admin")
router.message.filter(F.chat.type.in_({"group", "supergroup"}))
router.message.filter(AdminFilter(is_admin=True))


@router.message(Command(commands=['auto_whois']))
async def show_intro(message: types.Message, repo_chat: RepoChat):
    switched_status = await repo_chat.switch_show_intro(message.chat.id)

    if switched_status:
        await message.answer("üëì‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer("üëì –ê–≤—Ç–æ-whois –≤—ã–∫–ª—é—á–µ–Ω")


@router.message(Command(commands=['only_active']))
async def only_active(message: types.Message, repo_chat: RepoChat):
    switched_status = await repo_chat.switch_only_active(message.chat.id)

    if switched_status:
        await message.answer("üîí –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø—É—Å–∫–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Å—Ç–µ–∫—à–∏–º —á–ª–µ–Ω—Å—Ç–≤–æ–º")
    else:
        await message.answer("üëê –ë–æ—Ç –±—É–¥–µ—Ç –ø—É—Å–∫–∞—Ç—å –≤—Å–µ—Ö –∫—Ç–æ –±—ã–ª –∫–æ–≥–¥–∞ –ª–∏–±–æ –≤ –∫–ª—É–±–µ")
